> require "core.llc"

The type `Ix n` represents the set of all natural numbers that are
less than `n`.

Simple Index Constants:

Numeric literals are interpreted as values of type Word.  As
a convenience, we provide the following definitions that
make it easy to use small index values:

> external ixl {primIxFromLiteral v n} :: ProxyNat v -> Ix n

> export ix0, ix1, ix2, ix3, ix4, ix5, ix6, ix7, ix8, ix9, ix10, ix11, ix12, ix13, ix14 :: Ix n
> ix0  = ixl#0
> ix1  = ixl#1
> ix2  = ixl#2
> ix3  = ixl#3
> ix4  = ixl#4
> ix5  = ixl#5
> ix6  = ixl#6
> ix7  = ixl#7
> ix8  = ixl#8
> ix9  = ixl#9
> ix10 = ixl#10
> ix11 = ixl#11
> ix12 = ixl#12
> ix13 = ixl#13
> ix14 = ixl#14

Other mechanisms for constructing Index values:

> external maxBound   {primIxMaxBound m}       :: Ix m
> external genMaybeIx {primGenMaybeIx (Maybe (Ix n)) n}
>            :: Maybe (Ix n) -> (Ix n -> Maybe (Ix n)) -> Word -> Maybe (Ix n)
> external genLeqIx   {primGenLeqIx (Maybe (Ix n)) m}
>            :: Maybe (Ix n) -> (Ix m -> Maybe (Ix n)) -> Word -> Ix m -> Maybe (Ix n)
> external modIx      {primModIx n m}          :: Bit n -> Ix m

> export maybeIx       :: Word -> Maybe (Ix n)
> maybeIx               = genMaybeIx Nothing Just

> export <=?           :: Word -> Ix m -> Maybe (Ix m)
> (<=?)                 = genLeqIx Nothing Just

Index-oriented arithmetic:

> external genLtInc {primGenLtInc (Maybe (Ix m)) m},
>          genLtDec {primGenLtDec (Maybe (Ix m)) m}
>    :: Maybe (Ix m) -> (Ix m -> Maybe (Ix m)) -> Ix m -> Ix m -> Ix m -> Maybe (Ix m)

> export ltIncBy, ltDecBy :: Ix n -> Ix n -> Ix n -> Maybe (Ix n)
> ltIncBy = genLtInc Nothing Just
> ltDecBy = genLtDec Nothing Just

The `ltInc` and `ltDec` operators not only compare index
values, but also return evidence that the left value is less
than the right value, either by returning an incremented
left value or a decremented right value, respectively:

- The expression i `ltInc` j returns either Just (i+1) if
  i<j, or else Nothing.

- The expression i `ltDec` j returns either Just (j-1) if
  i<j, or else Nothing.

> export ltInc, ltDec :: Ix n -> Ix n -> Maybe (Ix n)
> ltInc = ltIncBy ix1
> ltDec = ltDecBy ix1

A loop that works through the elements of an array might
start at index `ix0` and then increment / add one to the
index to access subsequent elements, eventually reaching the
end of the array.  This kind of behavior can be described
using the following incIx operator; the result of `incIx i`
is either a value `Just j` where `j=i+1` is a valid index of
the same type as `i`, or else `Nothing`, which indicates
that the input `i` was the largest valid index, so
attempting to increment it would produce an invalid result.

> export incIx, decIx  :: Ix n -> Maybe (Ix n)
> incIx i = i   `ltInc` maxBound
> decIx j = ix0 `ltDec` j

As an example, the `foreach` operator describes a form of
loop that performs a particular computation once for each
value in a given index type.  Note that it is not necessary
to specify the upper and lower bounds for the loop because
these are determined automatically from the type of the
function `f`:

> export foreach       :: (Ix n -> Proc Unit) -> Proc Unit
> foreach               = foreachFrom ix0

> export foreachFrom   :: Ix n -> (Ix n -> Proc Unit) -> Proc Unit
> foreachFrom i         = foreachFromTo i maxBound

> export foreachTo     :: Ix n -> (Ix n -> Proc Unit) -> Proc Unit
> foreachTo n           = foreachFromTo ix0 n

> -- "do { p i; } while (++i < n);"
> export foreachFromTo :: Ix n -> Ix n -> (Ix n -> Proc Unit) -> Proc Unit
> foreachFromTo i n p   = do p i
>                            case i `ltInc` n of
>                              Just j  -> foreachFromTo j n p
>                              Nothing -> return Unit

Basic comparisons on index values:

> external eqIx       {primIxEq m},
>          neIx       {primIxNe m},
>          ltIx       {primIxLt m},
>          gtIx       {primIxGt m},
>          leIx       {primIxLe m},
>          geIx       {primIxGe m}       :: Ix m -> Ix m -> Bool

Arithmetic on index values:

> external lshrIx     {primIxShiftR n m} :: Ix n -> Ix m  -> Ix n

Conversions from Index Types:

We can use the `ixToBit` function to find the bit vector
corresponding to a given index value.  Of course, the bit
vector size must be large enough for the given index type:
with an index of 256, for example, we will need a bit vector
with at least 8 bits:

> external ixToBit    {primIxToBit m n}  :: Ix m -> Bit n

Index type operations:

> external intoIx    {primIntoIx m s}      :: Ix m -> Ix s                   -- m <= s
> external liftIx    {primLiftIx m s}      :: Ix m -> Ix s                   -- m <= s

> external genFromIx {primGenFromIx a m s} :: a -> (Ix m -> a) -> Ix s -> a  -- m <= s
> external genDropIx {primGenDropIx a m s} :: a -> (Ix m -> a) -> Ix s -> a  -- m <= s

> export fromIx :: Ix s -> Maybe (Ix m)  -- m <= s
> fromIx         = genFromIx Nothing Just

> export dropIx :: Ix s -> Maybe (Ix m)  -- m <= s
> dropIx         = genDropIx Nothing Just

> external pairIx {primPairIx m n p} :: Ix m -> Ix n -> Ix p  -- p = m * n
> external fstIx  {primFstIx  p m}   :: Ix p -> Ix m          -- p = m * n
> external sndIx  {primSndIx  p n}   :: Ix p -> Ix n          -- p = m * n


