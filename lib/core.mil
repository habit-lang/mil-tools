bitdata Bool = False [B0] | True [B1]

-- Monadic primitives:
export primRet :: a -> Proc a
primRet   <- {x} c <- ret1{x}; Proc(c)
ret1{x} [] = return x

-- Pairs:
data Pair a b = Pair a b

-- Maybe:
data Maybe a = Nothing | Just a

-- Lists:
data List a = Nil | Cons a (List a)

-- Arithmetic primitives:
export / :: Word -> Word -> Word
/ <- {x,y} div((x,y))  -- TODO: unsafe

-- Bitwise operators:

export shl, lshr, ashr :: Word -> Word -> Word
shl  <- {x,y} shl((x,y))
lshr <- {x,y} lshr((x,y))
ashr <- {x,y} ashr((x,y))

-- Pointers/References:

export refToWord, ptrToWord
external refToWord = ptrToWordImp :: Ref a -> Word
external ptrToWord = ptrToWordImp :: Ptr a -> Word

ptrToWordImp :: Word -> Word
ptrToWordImp <- {w} return w

-- Strings:

-- MIL implementation of loadChar primitive; must currently be
-- written in MIL so that we can access the load8 primitive.

export loadChar
external loadChar  = loadCharImp  :: Ref String -> Proc Word

loadCharImp       :: Addr -> Proc (Bit 8)
loadCharImp       <- {s} c <- loadCharImp1{s}; Proc(c)
loadCharImp1{s} [] = load8((s))

